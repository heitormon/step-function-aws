AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  step-function

  Sample SAM Template for step-function
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  Input:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda-handler/
      Handler: app.inputFunction
      Runtime: nodejs14.x
      Architectures:
        - x86_64  
  Producer:  
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda-handler/
      Handler: app.producerFunction
      Runtime: nodejs14.x
      Timeout: 80
      Architectures:
        - x86_64
  Transfer:  
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda-handler/
      Handler: app.transferFunction
      Runtime: nodejs14.x
      Architectures:
        - x86_64

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    DependsOn: StateMachineRole
    Properties:
      StateMachineName: StateMachine
      DefinitionString: 
        !Sub 
          - |-
            {
              "Comment": "Funcao hello e bye world",
              "StartAt": "InputFunction",
              "States": {
                  "InputFunction": {
                      "Type": "Task",
                      "Resource": "${Input}",
                      "ResultPath": "$.result",
                      "Next": "StructureMap"
                  },
                  "StructureMap": {
                      "Type": "Map",
                      "InputPath": "$.result",
                      "ItemsPath": "$.items",
                      "MaxConcurrency": 0,
                      "ResultPath": "$.detail.shipped",
                      "Next": "Transfer",
                      "Iterator": {
                          "StartAt": "ProducerFunction",
                          "States": {
                              "ProducerFunction": {
                                  "Type": "Task",
                                  "Resource": "${Producer}",
                                  "End": true
                              }
                          }
                      }
                  },
                  "Transfer": {
                      "Type": "Task",
                      "Resource": "${Transfer}",
                      "End": true
                  }
              }
            } 
          - {
            Input: !GetAtt [ Input, Arn ],
            Producer: !GetAtt [ Producer, Arn ],
            Transfer: !GetAtt [ Transfer, Arn ]
          }
      RoleArn: !GetAtt [ StateMachineRole, Arn ]
  StateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            